version: 2.1

orbs: 

  slack: circleci/slack@4.5.1

commands:

  ci-on-fail:
    description: "Failure Sequence on Failed Build, Test, or Analyze Steps"
    parameters:
      id:
        type: string
        default: << pipeline.id >>
      pull-url:
        type: string
        default: << pipeline.project.git_url >>
    steps:
      - run:
          name: Slack Failure Echo Message
          command: |
            echo "Pipeline ID Failure: << parameters.id >>"
            echo "Git Pull URL Failure: << parameters.pull-url >>"
          when: on_fail
      - slack/notify:
          event: fail
          template: basic_fail_1

  destroy-environment-on-fail:
    steps:
      - run:
          name: Install AWS CLI
          when: on_fail
          command: |
            # install the dependencies needed for your playbook
            sudo apt update
            sudo apt -y install awscli 
      - run:
          name: Destroy Backend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy Frontend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:

  # CI Portion - Build Phase
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend build
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - ci-on-fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - ci-on-fail
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Unit Tests
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
      - ci-on-fail
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Unit Tests
          command: |
            # Your code here
            cd backend
            npm install
            npm run test
      - ci-on-fail

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Security Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - ci-on-fail

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Security Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - ci-on-fail

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-3 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-3 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" 2>&1 | tee -a .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text 2>&1 | tee -a  .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment-on-fail

  configure-infrastructure:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            fc:8d:e5:1b:dc:e4:76:86:6d:93:e9:b8:42:c2:04:fa
      # attach workspace
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Move Workspace Over"
          command: mv /tmp/workspace/project/.circleci/ansible/inventory.txt .circleci/ansible/.
      - run:
          name: Update Apt
          command: |
            # Update Apt
            sudo apt update
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            sudo apt -y install tar gzip ansible awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment-on-fail

  # CD Portion - Deploy Phase
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/NbhzRsTE5FRwVBXFBLo71R/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1' -k
            fi
      # Here's where you will add some code to rollback on failure   
      - destroy-environment-on-fail
  
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/base:stable-20.04
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt -y install python ansible nodejs awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text 2>&1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment-on-fail
  
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable-20.04
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            fc:8d:e5:1b:dc:e4:76:86:6d:93:e9:b8:42:c2:04:fa
      # attach workspace
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Move Workspace Over"
          command: mv /tmp/workspace/project/.circleci/ansible/inventory.txt .circleci/ansible/.
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt -y install tar gzip ansible nodejs
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      # Ã¥- destroy-environment-on-fail  

  # Only for Debug purposes.  Disable when Not needed
  debug-destroy-infra:  
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Auto Destroy Backend environment
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Auto Destroy Frontend environment
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  udapeople-ci-cd:
    jobs:
      - build-frontend:
          context: slack-context
      - build-backend:
          context: slack-context
      - test-frontend:
          context: slack-context
          requires:
            - build-frontend
      - test-backend:
          context: slack-context
          requires:
            - build-backend
      - scan-frontend:
          context: slack-context
          requires:
            - test-frontend
      - scan-backend:
          context: slack-context
          requires:
            - test-backend
      - deploy-infrastructure:
          requires:
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      #- debug-destroy-infra:  # Only for Debug purposes
      #    requires:
      #      - deploy-frontend
      #      - deploy-backend