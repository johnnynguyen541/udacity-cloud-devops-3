version: 2.1

orbs: 

  slack: circleci/slack@4.5.1

commands:

  ci-on-fail:
    description: "Failure Sequence on Failed Build, Test, or Analyze Steps"
    parameters:
      id:
        type: string
        default: << pipeline.id >>
      pull-url:
        type: string
        default: << pipeline.project.git_url >>
    steps:
      - run:
          name: Slack Failure Echo Message
          command: |
            echo "Pipeline ID Failure: << parameters.id >>"
            echo "Git Pull URL Failure: << parameters.pull-url >>"
          when: on_fail
      - slack/notify:
          event: fail
          template: basic_fail_1

  destroy-environment-on-fail:
    steps:
      - run:
          name: Destroy Backend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy Frontend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend build
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - ci-on-fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - ci-on-fail
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Unit Tests
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
      - ci-on-fail
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Unit Tests
          command: |
            # Your code here
            cd backend
            npm install
            npm run test
      - ci-on-fail

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Security Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - ci-on-fail

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Security Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - ci-on-fail

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-3 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-3 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text 2>&1 | tee .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment-on-fail

  configure-infrastructure:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            53:1c:24:8f:0b:33:e7:17:51:31:ff:96:0f:09:41:06
      # attach workspace
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Move Workspace Over"
          command: mv /tmp/workspace .
      - run:
          name: Update Apt
          command: |
            # Update Apt
            sudo apt update
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            sudo apt -y install tar gzip ansible awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  debug-destroy-infra:  # Only for Debug purposes.  Disable when Not needed
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Auto Destroy Backend environment
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Auto Destroy Frontend environment
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  udapeople-ci-cd:
    jobs:
      - build-frontend:
          context: slack-context
      - build-backend:
          context: slack-context
      - test-frontend:
          context: slack-context
          requires:
            - build-frontend
      - test-backend:
          context: slack-context
          requires:
            - build-backend
      - scan-frontend:
          context: slack-context
          requires:
            - test-frontend
      - scan-backend:
          context: slack-context
          requires:
            - test-backend
      - deploy-infrastructure:
          requires:
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - debug-destroy-infra:  # Only for Debug purposes
          requires:
            - configure-infrastructure